/** HTML_SRC_1 START */
const char* html_page = 
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset='utf-8'>\n"
"<meta http-equiv='X-UA-Compatible' content='IE=edge'>\n"
"<title>Hydroponic</title>\n"
"<meta name='viewport' content='width=device-width, initial-scale=1'>\n"
"<link rel='stylesheet' type='text/css' media='screen' href='main.css'>\n"
"</head>\n"
"<body onload=\"liveDataAjax()\">\n"
"<header>\n"
"<span class=\"connection\" id=\"connected\">\n"
"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" class=\"connected\" viewBox=\"0 0 16 16\">\n"
"<path d=\"M15.384 6.115a.485.485 0 0 0-.047-.736A12.444 12.444 0 0 0 8 3C5.259 3 2.723 3.882.663 5.379a.485.485 0 0 0-.048.736.518.518 0 0 0 .668.05A11.448 11.448 0 0 1 8 4c2.507 0 4.827.802 6.716 2.164.205.148.49.13.668-.049z\"/>\n"
"<path d=\"M13.229 8.271a.482.482 0 0 0-.063-.745A9.455 9.455 0 0 0 8 6c-1.905 0-3.68.56-5.166 1.526a.48.48 0 0 0-.063.745.525.525 0 0 0 .652.065A8.46 8.46 0 0 1 8 7a8.46 8.46 0 0 1 4.576 1.336c.206.132.48.108.653-.065zm-2.183 2.183c.226-.226.185-.605-.1-.75A6.473 6.473 0 0 0 8 9c-1.06 0-2.062.254-2.946.704-.285.145-.326.524-.1.75l.015.015c.16.16.407.19.611.09A5.478 5.478 0 0 1 8 10c.868 0 1.69.201 2.42.56.203.1.45.07.61-.091l.016-.015zM9.06 12.44c.196-.196.198-.52-.04-.66A1.99 1.99 0 0 0 8 11.5a1.99 1.99 0 0 0-1.02.28c-.238.14-.236.464-.04.66l.706.706a.5.5 0 0 0 .707 0l.707-.707z\"/>\n"
"</svg>\n"
"</span>\n"
"<span class=\"connection\" id=\"disconnected\">\n"
"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" class=\"connected\" viewBox=\"0 0 16 16\">\n"
"<path d=\"M10.706 3.294A12.545 12.545 0 0 0 8 3C5.259 3 2.723 3.882.663 5.379a.485.485 0 0 0-.048.736.518.518 0 0 0 .668.05A11.448 11.448 0 0 1 8 4c.63 0 1.249.05 1.852.148l.854-.854zM8 6c-1.905 0-3.68.56-5.166 1.526a.48.48 0 0 0-.063.745.525.525 0 0 0 .652.065 8.448 8.448 0 0 1 3.51-1.27L8 6zm2.596 1.404.785-.785c.63.24 1.227.545 1.785.907a.482.482 0 0 1 .063.745.525.525 0 0 1-.652.065 8.462 8.462 0 0 0-1.98-.932zM8 10l.933-.933a6.455 6.455 0 0 1 2.013.637c.285.145.326.524.1.75l-.015.015a.532.532 0 0 1-.611.09A5.478 5.478 0 0 0 8 10zm4.905-4.905.747-.747c.59.3 1.153.645 1.685 1.03a.485.485 0 0 1 .047.737.518.518 0 0 1-.668.05 11.493 11.493 0 0 0-1.811-1.07zM9.02 11.78c.238.14.236.464.04.66l-.707.706a.5.5 0 0 1-.707 0l-.707-.707c-.195-.195-.197-.518.04-.66A1.99 1.99 0 0 1 8 11.5c.374 0 .723.102 1.021.28zm4.355-9.905a.53.53 0 0 1 .75.75l-10.75 10.75a.53.53 0 0 1-.75-.75l10.75-10.75z\"/>\n"
"</svg>\n"
"</span>\n"
"<span class=\"connection\">\n"
"<p class=\"online\" id=\"online\" >Online</p>\n"
"</span>\n"
"</header>\n"
"<div class=\"content\">\n"
"<div class=\"card hide\" id=\"message\">\n"
"<span></span>\n"
"<h1></h1>\n"
"</div>\n"
"<h3>Hydroponic</h3>\n"
"<!--CARDS_START-->\n"
"<div class=\"card primary\" id=\"clock\">\n"
"<span>\n"
"<h3>Clock</h3>\n"
"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" fill=\"currentColor\" class=\"bi bi-hourglass\" viewBox=\"0 0 16 16\">\n"
"<path d=\"M2 1.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1-.5-.5m2.5.5v1a3.5 3.5 0 0 0 1.989 3.158c.533.256 1.011.791 1.011 1.491v.702c0 .7-.478 1.235-1.011 1.491A3.5 3.5 0 0 0 4.5 13v1h7v-1a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351v-.702c0-.7.478-1.235 1.011-1.491A3.5 3.5 0 0 0 11.5 3V2z\"/>\n"
"</svg>\n"
"</span>\n"
"<h1>00:00</h1>\n"
"</div>\n"
"<div class=\"card primary\" id=\"temperature\">\n"
"<span>\n"
"<h3>Temperature</h3>\n"
"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" fill=\"currentColor\" class=\"bi bi-thermometer-half\" viewBox=\"0 0 16 16\">\n"
"<path d=\"M9.5 12.5a1.5 1.5 0 1 1-2-1.415V6.5a.5.5 0 0 1 1 0v4.585a1.5 1.5 0 0 1 1 1.415\"/>\n"
"<path d=\"M5.5 2.5a2.5 2.5 0 0 1 5 0v7.55a3.5 3.5 0 1 1-5 0zM8 1a1.5 1.5 0 0 0-1.5 1.5v7.987l-.167.15a2.5 2.5 0 1 0 3.333 0l-.166-.15V2.5A1.5 1.5 0 0 0 8 1\"/>\n"
"</svg>\n"
"</span>\n"
"<h1>0.0</h1>\n"
"</div>\n"
"<div class=\"card primary\" id=\"humidity\">\n"
"<span>\n"
"<h3>Humidity</h3>\n"
"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" fill=\"currentColor\" class=\"bi bi-moisture\" viewBox=\"0 0 16 16\">\n"
"<path d=\"M13.5 0a.5.5 0 0 0 0 1H15v2.75h-.5a.5.5 0 0 0 0 1h.5V7.5h-1.5a.5.5 0 0 0 0 1H15v2.75h-.5a.5.5 0 0 0 0 1h.5V15h-1.5a.5.5 0 0 0 0 1h2a.5.5 0 0 0 .5-.5V.5a.5.5 0 0 0-.5-.5zM7 1.5l.364-.343a.5.5 0 0 0-.728 0l-.002.002-.006.007-.022.023-.08.088a29 29 0 0 0-1.274 1.517c-.769.983-1.714 2.325-2.385 3.727C2.368 7.564 2 8.682 2 9.733 2 12.614 4.212 15 7 15s5-2.386 5-5.267c0-1.05-.368-2.169-.867-3.212-.671-1.402-1.616-2.744-2.385-3.727a29 29 0 0 0-1.354-1.605l-.022-.023-.006-.007-.002-.001zm0 0-.364-.343zm-.016.766L7 2.247l.016.019c.24.274.572.667.944 1.144.611.781 1.32 1.776 1.901 2.827H4.14c.58-1.051 1.29-2.046 1.9-2.827.373-.477.706-.87.945-1.144zM3 9.733c0-.755.244-1.612.638-2.496h6.724c.395.884.638 1.741.638 2.496C11 12.117 9.182 14 7 14s-4-1.883-4-4.267\"/>\n"
"</svg>\n"
"</span>\n"
"<h1>0.0</h1>\n"
"</div>\n"
"<div class=\"card primary\" id=\"ph\">\n"
"<span>\n"
"<h3>Ph</h3>\n"
"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" fill=\"currentColor\" class=\"bi bi-speedometer\" viewBox=\"0 0 16 16\">\n"
"<path d=\"M8 2a.5.5 0 0 1 .5.5V4a.5.5 0 0 1-1 0V2.5A.5.5 0 0 1 8 2M3.732 3.732a.5.5 0 0 1 .707 0l.915.914a.5.5 0 1 1-.708.708l-.914-.915a.5.5 0 0 1 0-.707M2 8a.5.5 0 0 1 .5-.5h1.586a.5.5 0 0 1 0 1H2.5A.5.5 0 0 1 2 8m9.5 0a.5.5 0 0 1 .5-.5h1.5a.5.5 0 0 1 0 1H12a.5.5 0 0 1-.5-.5m.754-4.246a.39.39 0 0 0-.527-.02L7.547 7.31A.91.91 0 1 0 8.85 8.569l3.434-4.297a.39.39 0 0 0-.029-.518z\"/>\n"
"<path fill-rule=\"evenodd\" d=\"M6.664 15.889A8 8 0 1 1 9.336.11a8 8 0 0 1-2.672 15.78zm-4.665-4.283A11.95 11.95 0 0 1 8 10c2.186 0 4.236.585 6.001 1.606a7 7 0 1 0-12.002 0\"/>\n"
"</svg>\n"
"</span>\n"
"<h1>0.0</h1>\n"
"</div>\n"
"<div class=\"card primary\" id=\"pump\">\n"
"<span>\n"
"<h3>Pump</h3>\n"
"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" fill=\"currentColor\" class=\"bi bi-fuel-pump\" viewBox=\"0 0 16 16\">\n"
"<path d=\"M3 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5z\"/>\n"
"<path d=\"M1 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v8a2 2 0 0 1 2 2v.5a.5.5 0 0 0 1 0V8h-.5a.5.5 0 0 1-.5-.5V4.375a.5.5 0 0 1 .5-.5h1.495c-.011-.476-.053-.894-.201-1.222a.97.97 0 0 0-.394-.458c-.184-.11-.464-.195-.9-.195a.5.5 0 0 1 0-1q.846-.002 1.412.336c.383.228.634.551.794.907.295.655.294 1.465.294 2.081v3.175a.5.5 0 0 1-.5.501H15v4.5a1.5 1.5 0 0 1-3 0V12a1 1 0 0 0-1-1v4h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1zm9 0a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v13h8z\"/>\n"
"</svg>\n"
"</span>\n"
"<h1>OFF</h1>\n"
"</div>\n"
"<div class=\"card primary\" id=\"level\">\n"
"<span>\n"
"<h3>Level</h3>\n"
"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" fill=\"currentColor\" class=\"bi bi-align-top\" viewBox=\"0 0 16 16\">\n"
"<rect width=\"4\" height=\"12\" rx=\"1\" transform=\"matrix(1 0 0 -1 6 15)\"/>\n"
"<path d=\"M1.5 2a.5.5 0 0 1 0-1zm13-1a.5.5 0 0 1 0 1zm-13 0h13v1h-13z\"/>\n"
"</svg>\n"
"</span>\n"
"<h1>LOW</h1>\n"
"</div>\n"
"<div class=\"card primary\" id=\"light\">\n"
"<span>\n"
"<h3>Light</h3>\n"
"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" fill=\"currentColor\" class=\"bi bi-sun\" viewBox=\"0 0 16 16\">\n"
"<path d=\"M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6m0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8M8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0m0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13m8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5M3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8m10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0m-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0m9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707M4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708\"/>\n"
"</svg>\n"
"</span>\n"
"<h1>DAY</h1>\n"
"</div>\n"
"<div class=\"card primary\" id=\"air\">\n"
"<span>\n"
"<h3>AIR</h3>\n"
"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" fill=\"currentColor\" class=\"bi bi-fan\" viewBox=\"0 0 16 16\">                         <path d=\"M10 3c0 1.313-.304 2.508-.8 3.4a2 2 0 0 0-1.484-.38c-.28-.982-.91-2.04-1.838-2.969a8 8 0 0 0-.491-.454A6 6 0 0 1 8 2c.691 0 1.355.117 1.973.332Q10 2.661 10 3m0 5q0 .11-.012.217c1.018-.019 2.2-.353 3.331-1.006a8 8 0 0 0 .57-.361 6 6 0 0 0-2.53-3.823 9 9 0 0 1-.145.64c-.34 1.269-.944 2.346-1.656 3.079.277.343.442.78.442 1.254m-.137.728a2 2 0 0 1-1.07 1.109c.525.87 1.405 1.725 2.535 2.377q.3.174.605.317a6 6 0 0 0 2.053-4.111q-.311.11-.641.199c-1.264.339-2.493.356-3.482.11ZM8 10c-.45 0-.866-.149-1.2-.4-.494.89-.796 2.082-.796 3.391q0 .346.027.678A6 6 0 0 0 8 14c.94 0 1.83-.216 2.623-.602a8 8 0 0 1-.497-.458c-.925-.926-1.555-1.981-1.836-2.96Q8.149 10 8 10M6 8q0-.12.014-.239c-1.02.017-2.205.351-3.34 1.007a8 8 0 0 0-.568.359 6 6 0 0 0 2.525 3.839 8 8 0 0 1 .148-.653c.34-1.267.94-2.342 1.65-3.075A2 2 0 0 1 6 8m-3.347-.632c1.267-.34 2.498-.355 3.488-.107.196-.494.583-.89 1.07-1.1-.524-.874-1.406-1.733-2.541-2.388a8 8 0 0 0-.594-.312 6 6 0 0 0-2.06 4.106q.309-.11.637-.199M8 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2\"/>                         <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16\"/>                     </svg>\n"
"</span>\n"
"<h1>IN</h1>\n"
"</div>\n"
"<div>\n"
"<h3>PUMP CONTROL</h3>\n"
"<button onclick=\"onClickBtn('pump_control')\" id=\"pump_control\">OFF</button>\n"
"</div>\n"
"<div>\n"
"<h3>BTN IN OUT</h3>\n"
"<button onclick=\"onClickBtn('btn_in_out')\" id=\"btn_in_out\">IN</button>\n"
"</div>\n"
"<!--CARDS_END-->\n"
"</div>\n"
"<footer>\n"
"</footer>\n"
"<script src='main.js'></script>\n"
"</body>\n"
"</html>\n";
/** HTML_SRC_1 END */


/** JS_SRC_1 START */
const char* js_client = 
"var DRT = 500;\n"
"function updateCSSClass(element, css){\n"
"if(css != 'primary')\n"
"element.classList.remove('primary');\n"
"if(css != 'secondary')\n"
"element.classList.remove('secondary');\n"
"if(css != 'success')\n"
"element.classList.remove('success');\n"
"if(css != 'danger')\n"
"element.classList.remove('danger');\n"
"if(css != 'warning')\n"
"element.classList.remove('warning');\n"
"if(css != 'hide')\n"
"element.classList.remove('hide');\n"
"element.classList.add(css);\n"
"}\n"
"function updateData(data){\n"
"document.getElementById(\"message\").children[1].innerHTML = \"\"+data.message+\"\";\n"
"updateCSSClass(document.getElementById(\"message\"), data.message_class);\n"
"document.getElementById(\"clock\").children[1].innerHTML = \"\"+data.clock+\" \";\n"
"updateCSSClass(document.getElementById(\"clock\"), data.clock_class);\n"
"document.getElementById(\"temperature\").children[1].innerHTML = \"\"+data.temperature+\" &deg;C\";\n"
"updateCSSClass(document.getElementById(\"temperature\"), data.temperature_class);\n"
"document.getElementById(\"humidity\").children[1].innerHTML = \"\"+data.humidity+\" %\";\n"
"updateCSSClass(document.getElementById(\"humidity\"), data.humidity_class);\n"
"document.getElementById(\"ph\").children[1].innerHTML = \"\"+data.ph+\" \";\n"
"updateCSSClass(document.getElementById(\"ph\"), data.ph_class);\n"
"document.getElementById(\"pump\").children[1].innerHTML = \"\"+data.pump+\" \";\n"
"updateCSSClass(document.getElementById(\"pump\"), data.pump_class);\n"
"document.getElementById(\"level\").children[1].innerHTML = \"\"+data.level+\" \";\n"
"updateCSSClass(document.getElementById(\"level\"), data.level_class);\n"
"document.getElementById(\"light\").children[1].innerHTML = \"\"+data.light+\" \";\n"
"updateCSSClass(document.getElementById(\"light\"), data.light_class);\n"
"document.getElementById(\"air\").children[1].innerHTML = \"\"+data.air+\" \";\n"
"updateCSSClass(document.getElementById(\"air\"), data.air_class);\n"
"document.getElementById(\"pump_control\").innerHTML = \"\"+data.pump_control+\"\";\n"
"updateCSSClass(document.getElementById(\"pump_control\"), data.pump_control_class);\n"
"document.getElementById(\"btn_in_out\").innerHTML = \"\"+data.btn_in_out+\"\";\n"
"updateCSSClass(document.getElementById(\"btn_in_out\"), data.btn_in_out_class);\n"
"}\n"
"function getCommand(btn_id, value){\n"
"if (btn_id == \"pump_control\") {\n"
"if (value == 'AUTO') {\n"
"return 'OFF';\n"
"} else if (value == 'OFF') {\n"
"return 'ON';\n"
"} else {\n"
"return 'AUTO';\n"
"}\n"
"}	if (btn_id == \"btn_in_out\") {\n"
"if (value == 'IN') {\n"
"return 'OUT';\n"
"} else {\n"
"return 'IN';\n"
"}\n"
"}\n"
"}\n"
"function onClickBtn(btn_id){\n"
"var val = document.getElementById(btn_id).innerHTML;\n"
"var cmd = getCommand(btn_id,val);\n"
"console.log(cmd)\n"
"sendButtonClick('/act?'+btn_id+'='+cmd)\n"
"}\n"
"function updateNetwork(connected){\n"
"if(connected){\n"
"document.getElementById('disconnected').style.display = 'none';\n"
"document.getElementById('connected').style.display = 'block';\n"
"document.getElementById('online').innerHTML = 'Online';\n"
"}\n"
"else{\n"
"document.getElementById('connected').style.display = 'none';\n"
"document.getElementById('disconnected').style.display = 'block';\n"
"document.getElementById('online').innerHTML = 'Offline';\n"
"}\n"
"}\n"
"function sendButtonClick(url){\n"
"const xhr = new XMLHttpRequest();\n"
"xhr.open('GET', url, true);\n"
"xhr.onload = () => {\n"
"if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n"
"var data= JSON.parse(xhr.responseText);\n"
"updateNetwork(true);\n"
"updateData(data);\n"
"}\n"
"}\n"
"xhr.onerror = function() {\n"
"updateNetwork(false);\n"
"};\n"
"xhr.send();\n"
"}\n"
"var netcount = 0;\n"
"function reconnect(){\n"
"if(netcount == 0){\n"
"console.log(\"Retrying\");\n"
"document.getElementById('online').innerHTML = 'Retrying..';\n"
"setTimeout(liveDataAjax,1000);\n"
"return\n"
"}\n"
"netcount -= 1;\n"
"console.log(\"count\",netcount);\n"
"document.getElementById('online').innerHTML = 'Offline ('+netcount+')';\n"
"setTimeout(reconnect, 1000);\n"
"}\n"
"function liveDataAjax(){\n"
"const xhr = new XMLHttpRequest();\n"
"xhr.open('GET', '/main.json', true);\n"
"xhr.onload = () => {\n"
"if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n"
"var data= JSON.parse(xhr.responseText);\n"
"updateData(data);\n"
"updateNetwork(true);\n"
"setTimeout(liveDataAjax, DRT);\n"
"}\n"
"else if (xhr.readyState === XMLHttpRequest.DONE){\n"
"updateNetwork(false);\n"
"netcount = 5;\n"
"reconnect();\n"
"}\n"
"};\n"
"xhr.onerror = function() {\n"
"updateNetwork(false);\n"
"netcount = 5;\n"
"reconnect();\n"
"};\n"
"xhr.send();\n"
"}\n";
/** JS_SRC_1 END */


/** CSS_SRC_1 START */
const char* main_css = 
"body{\n"
"background-color: #F1FCFF;\n"
"padding:0px;\n"
"margin:0px;\n"
"text-align: center;\n"
"}\n"
"header{\n"
"height:35px;\n"
"padding:10px;\n"
"text-align:left;\n"
"display: flex;\n"
"background-color: #0093E9;\n"
"position:fixed;\n"
"width:100%;\n"
"z-index:100;\n"
"top:0;\n"
"}\n"
"footer{\n"
"padding:20px;\n"
"}\n"
"form{\n"
"margin:15px auto 0px auto;\n"
"max-width:90%;\n"
"background-color: #AAAAAA;\n"
"padding: 15px 0 15px 0;\n"
"border-radius: 5px;\n"
"}\n"
"button{\n"
"margin:8px auto 0px auto;\n"
"width:90%;\n"
"background-color: #AAAAAA;\n"
"padding: 10px 0 10px 0;\n"
"border-radius: 5px;\n"
"font-size: 24px;\n"
"font-weight: bold;\n"
"color:white;\n"
"border: none;\n"
"}\n"
"button:active {\n"
"width:89%;\n"
"padding: 10px 0 10px 0;\n"
"color:black;\n"
"}\n"
"input{\n"
"margin:8px auto 0px auto;\n"
"width:90%;\n"
"padding: 10px 0 10px 0;\n"
"border-radius: 5px;\n"
"font-size: 22px;\n"
"color:black;\n"
"border: none;\n"
"}\n"
"label{\n"
"margin:15px auto 0px auto;\n"
"width:90%;\n"
"padding: 0px 0 0px 0;\n"
"font-size: 22px;\n"
"display:block;\n"
"}\n"
".radio-group{\n"
"margin:15px auto 15px auto;\n"
"font-size: 24px;\n"
"width:100%;\n"
"display:flex;\n"
"flex-direction: row;\n"
"text-align:left;\n"
"}\n"
".radio-label{\n"
"margin:0px;\n"
"padding:0px;\n"
"}\n"
".radio{\n"
"width:32px;\n"
"margin:0px 10px 0px 15px;\n"
"}\n"
".content{\n"
"margin-top:70px;\n"
"}\n"
".connection{\n"
"margin-left:20px;\n"
"color: white;\n"
"}\n"
".online{\n"
"margin: 8px 0 0 -8px;\n"
"font-size: 16px;\n"
"color:white;\n"
"}\n"
".card{\n"
"margin:15px auto 0px auto;\n"
"max-width:90%;\n"
"padding: 15px 0 15px 0;\n"
"border-radius: 5px;\n"
"}\n"
".primary{\n"
"background-color: #8BC6EC;\n"
"visibility: visible;\n"
"}\n"
".secondary{\n"
"background-color: #AAAAAA;\n"
"visibility: visible;\n"
"}\n"
".success{\n"
"background-color: #82c063;\n"
"visibility: visible;\n"
"}\n"
".danger{\n"
"background-color: #F76666;\n"
"visibility: visible;\n"
"}\n"
".warning{\n"
"background-color: #E3D377;\n"
"visibility: visible;\n"
"}\n"
".hide{\n"
"visibility: hidden;\n"
"}\n"
"@media only screen and (min-width: 500px) {\n"
".card {\n"
"max-width:400px;\n"
"}\n"
"button{\n"
"max-width:400px;\n"
"}\n"
"form{\n"
"max-width:400px;\n"
"}\n"
"label{\n"
"max-width:400px;\n"
"}\n"
"}\n"
"h1 {\n"
"margin: 2px;\n"
"color: white;\n"
"}\n"
"h2 {\n"
"margin: 2px;\n"
"color: black;\n"
"}\n";
/** CSS_SRC_1 END */





/** LED_BLINK_0 START */
#define DEF_LED_BLINK_GPIO 2
/** LED_BLINK_0 END */

/** DHT_MODULE_0 START */
#define DHT_PIN 4
/** DHT_MODULE_0 END */


/** ULTRASONIC_MODULEA_0 START */
/** ULTRASONIC_MODULEA_0 END */

/** ULTRASONIC_MODULEB_0 START */
/** ULTRASONIC_MODULEB_0 END */



/** SERVO_MODULEA_1 START */
/** SERVO_MODULEA_1 END */


/** SERVO_MODULEB_1 START */
/** SERVO_MODULEB_1 END */


/** ENTRY_CODE_0 START */
/** ENTRY_CODE_0 END */

/** EXIT_CODE_0 START */
/** EXIT_CODE_0 END */

/** FINGER_SENS_0 START */
/** FINGER_SENS_0 END */

/** USER_PINS_1 START */
#define PH_PIN     35
#define SUN_PIN    34
#define PUMP_PIN   18
#define FAN_PIN    19
#define LIGHT_PIN  15


#define LEVEL1_PIN 32
#define LEVEL2_PIN 33
#define LEVEL3_PIN 25
/** USER_PINS_1 END */




/** HEADER_FILES_WRBSERVER_1 START */
#include <WiFi.h>
#include <NetworkClient.h>
#include <WebServer.h>
#include <ESPmDNS.h>
/** HEADER_FILES_WRBSERVER_1 END */



/** DHT_MODULE_1 START */
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
/** DHT_MODULE_1 END */




/** LCD_MODULE_1 START */
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);
/** LCD_MODULE_1 END */



/** SERVO_MODULEA_1 START */
/** SERVO_MODULEA_1 END */





struct{
	String message;
	String message_class = "hide";

  /** DATA_STRUCT_1 START */
	String clock;
	String clock_class = "success";

	float temperature;
	String temperature_class = "success";

	float humidity;
	String humidity_class = "success";

	float ph;
	String ph_class = "success";

	String pump;
	String pump_class = "success";

	String level;
	String level_class = "success";

	String light;
	String light_class = "success";

	String air;
	String air_class = "success";

	String pump_control = "OFF";
	String pump_control_class = "success";
	String pump_control_cmd = "";

	String btn_in_out = "IN";
	String btn_in_out_class = "success";
	String btn_in_out_cmd = "";

  /** DATA_STRUCT_1 END */
} data;


struct{
	  const int BTN_NONE = -1;
    /** BTN_CONSTS_1  START */
	 const int PUMP_CONTROL = 1000;
	 const int BTN_IN_OUT = 1001;

    /** BTN_CONSTS_1 END */
} btnAction;
int userBtnAction = btnAction.BTN_NONE;





/** TEMPLATE_HEADERS_1 START */

/** TEMPLATE_HEADERS_1 END */


/** DHT_MODULE_2 START */
#define DHTTYPE    DHT11
DHT_Unified dht(DHT_PIN, DHTTYPE);

uint32_t delayMSDHT11;
uint32_t lastDHTRead;

struct{
  double temp = 0.0;
  double humidity = 0.0;
  int error = 0;
} DHT11Data;


void setUpDHT11(){
dht.begin();
  Serial.println(F("DHTxx Unified Sensor Example"));
  // Print temperature sensor details.
  sensor_t sensor;
  dht.temperature().getSensor(&sensor);
  Serial.println(F("------------------------------------"));
  Serial.println(F("Temperature Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("�C"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("�C"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("�C"));
  Serial.println(F("------------------------------------"));
  // Print humidity sensor details.
  dht.humidity().getSensor(&sensor);
  Serial.println(F("Humidity Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("%"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("%"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("%"));
  Serial.println(F("------------------------------------"));
  // Set delay between sensor readings based on sensor details.
  delayMSDHT11 = (sensor.min_delay / 1000)+200;
  lastDHTRead = millis();
}



boolean isDHTReady(){
  if( ((lastDHTRead + delayMSDHT11) < millis()) &&  ((lastDHTRead + 1000) < millis())){
    return true;
  }
  else{
    return false;
  }
}

void readDHT11(boolean printdebug){
  DHT11Data.error = 0;
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature)) {
    if(printdebug){
      Serial.println(F("Error reading temperature!"));
    }
    DHT11Data.error = 1;
  }
  else {
    if(printdebug){
      Serial.print(F("Temperature: "));
      Serial.print(event.temperature);
      Serial.println(F("�C"));
    }
    DHT11Data.temp =  event.temperature;//*1.8 + 32;
    // Serial.println(sizeof(event.temperature));
  }
  // Get humidity event and print its value.
  dht.humidity().getEvent(&event);
  if (isnan(event.relative_humidity)) {
    if(printdebug){
      Serial.println(F("Error reading humidity!"));
    }
    DHT11Data.error = 1;
  }
  else {
    if(printdebug){
      Serial.print(F("Humidity: "));
      Serial.print(event.relative_humidity);
      Serial.println(F("%"));
    }
    DHT11Data.humidity =  event.relative_humidity;
  }
  lastDHTRead = millis();
}
/** DHT_MODULE_2 END */


/** LCD_MODULE_2 START */
void setUpLcd(){
  Wire.begin();
  lcd.begin();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("power up");
  lcd.setCursor(0,1);
  lcd.print("booting..");
}
/** LCD_MODULE_2 END */



/** ULTRASONIC_MODULEA_1 START */
/** ULTRASONIC_MODULEA_1 END */

/** ULTRASONIC_MODULEB_1 START */
/** ULTRASONIC_MODULEB_1 END */


/** LEVEL_FUNC_1 START */
/** LEVEL_FUNC_1 END */

/** USER_MODULE_10 START */
/** USER_MODULE_10 END */


/** SERVO_MODULEA_2 START */
/** SERVO_MODULEA_2 END */


/** SERVO_MODULEB_2 START */
/** SERVO_MODULEB_2 END */






/** ENTRY_CODE_1 START */
/** ENTRY_CODE_1 END */





/** INTRRUPT_HANDLERA_1 START */
  /** ENTRY_CODE_2 START */
  /**ENTRY_CODE_2 END */
/** INTRRUPT_HANDLERA_1 END */




/** EXIT_CODE_1 START */
/** EXIT_CODE_1 END */


/** INTRRUPT_HANDLERB_1 START */
  /** ENTRY_CODE_2 START */
  /** ENTRY_CODE_2 END */
/** INTRRUPT_HANDLERB_1 END */




/** ENTRYEXIT_FUNCTION_1 START */
/** ENTRYEXIT_FUNCTION_1 END */

















String getMainJson(void){
/** JSON_RESPONSE_MAIN_1 START */
	return "{\"message\":\""+data.message+"\",\"message_class\":\""+data.message_class+"\", "
 				 "\"clock\":\""+data.clock+"\", \"clock_class\":\""+data.clock_class+"\", " 
 				 "\"temperature\":\""+String(data.temperature)+"\", \"temperature_class\":\""+data.temperature_class+"\", " 
 				 "\"humidity\":\""+String(data.humidity)+"\", \"humidity_class\":\""+data.humidity_class+"\", " 
 				 "\"ph\":\""+String(data.ph)+"\", \"ph_class\":\""+data.ph_class+"\", " 
 				 "\"pump\":\""+data.pump+"\", \"pump_class\":\""+data.pump_class+"\", " 
 				 "\"level\":\""+data.level+"\", \"level_class\":\""+data.level_class+"\", " 
 				 "\"light\":\""+data.light+"\", \"light_class\":\""+data.light_class+"\", " 
 				 "\"air\":\""+data.air+"\", \"air_class\":\""+data.air_class+"\", " 
 				 "\"pump_control\":\""+data.pump_control+"\", \"pump_control_class\":\""+data.pump_control_class+"\", " 
 				 "\"btn_in_out\":\""+data.btn_in_out+"\", \"btn_in_out_class\":\""+data.btn_in_out_class+"\"}";
/** JSON_RESPONSE_MAIN_1 END */
}


String getDataJson(void){
/** JSON_RESPONSE_DATA_1 START */
	return "{\"message\":\""+data.message+"\", "
 				 "\"clock\":\""+data.clock+"\", " 
 				 "\"temperature\":\""+String(data.temperature)+"\", " 
 				 "\"humidity\":\""+String(data.humidity)+"\", " 
 				 "\"ph\":\""+String(data.ph)+"\", " 
 				 "\"pump\":\""+data.pump+"\", " 
 				 "\"level\":\""+data.level+"\", " 
 				 "\"light\":\""+data.light+"\", " 
 				 "\"air\":\""+data.air+"\", " 
 				 "\"pump_control\":\""+data.pump_control+"\", " 
 				 "\"btn_in_out\":\""+data.btn_in_out+"\" }";
/** JSON_RESPONSE_DATA_1 END */
}



/** USER_HEADERS_1 START */

#include <Wire.h>
#include <DS3231-RTC.h>

DS3231 myRTC;

byte year;
byte month;
byte date;
byte dow;
byte hour;
byte minute;
byte second;

bool century = false;
bool h12Flag;
bool pmFlag;

/*****************************************************************************************************
 * Setup
 *  - Open Serial and Wire connection
 *  - Explain to the user how to use the program
 *****************************************************************************************************/
void setupRTC() {
  // Start the serial port

  // Start the I2C interface
  // Wire.begin();
  // Request the time correction on the Serial
  delay(1000);
  Serial.println("Format YYMMDDwhhmmssx");
  Serial.println("Where YY = Year (ex. 20 for 2020)");
  Serial.println("      MM = Month (ex. 04 for April)");
  Serial.println("      DD = Day of month (ex. 09 for 9th)");
  Serial.println("      w  = Day of week from 1 to 7, 1 = Sunday (ex. 5 for Thursday)");
  Serial.println("      hh = hours in 24h format (ex. 09 for 9AM or 21 for 9PM)");
  Serial.println("      mm = minutes (ex. 02)");
  Serial.println("      ss = seconds (ex. 42)");
  Serial.println("Example for input : 2004095090242x");
  Serial.println("-----------------------------------------------------------------------------");
  Serial.println("Please enter the current time to set on DS3231 ended by 'x':");
}

/** USER_HEADERS_1 END */









/** WIFI_CONFIG_1 START */
const char *ssid = "iota0314-water";
const char *password = "iota0314";
WebServer server(80);
/** WIFI_CONFIG_1 END */




/** HOTSPOT_CODE_1 START */
IPAddress local_ip(192,168,1,1);
IPAddress gateway(192,168,1,1);
IPAddress subnet(255,255,255,0);
/** HOTSPOT_CODE_1 END */





/** CLIENT_CODE_1 START */
/** CLIENT_CODE_1 END */










/** LED_BLINK_1 START */

uint32_t def_led_blink_timestamp = 0;

void setUpLedBlink(void){
    pinMode(DEF_LED_BLINK_GPIO,OUTPUT);
    def_led_blink_timestamp = millis();
}

void blink_led(int delay){
    if(def_led_blink_timestamp+delay > millis()){
        return;
    }
    if(digitalRead(DEF_LED_BLINK_GPIO)){
        digitalWrite(DEF_LED_BLINK_GPIO,LOW);
    }
    else{
        digitalWrite(DEF_LED_BLINK_GPIO,HIGH);
    }
    def_led_blink_timestamp = millis();
}
/** LED_BLINK_1 END */



/** SERVER_HANDLERS_1 START */
void forwardTo(String location){
  server.sendHeader("Location", location, true);
  server.send( 302, "text/plain", "");
}

void handle_Home() {
  server.send( 200, "text/html; charset=UTF-8", html_page);
}

void handle_MainJS() {
  server.send( 200, "application/javascript; charset=UTF-8", js_client);
}

void handle_MainJson(){ 
  server.send( 200, "text/json", getMainJson());
}

void handle_DataJson(){ 
  server.send( 200, "text/json", getDataJson());
}

void handle_MainCSS(){ 
  server.send( 200, "text/css; charset=UTF-8", main_css);
}



void handle_NotFound(){
  server.sendHeader("Location", "/", true);
  server.send( 302, "text/plain", "");
}


void handel_UserAction(){
	for (uint8_t i = 0; i < server.args(); i++) {
    /** BTN_ACTIONS_1 START */
		if(server.argName(i) == "pump_control"){
				userBtnAction = btnAction.PUMP_CONTROL;
				data.pump_control_cmd = server.arg(i);
		}
		else if(server.argName(i) == "btn_in_out"){
				userBtnAction = btnAction.BTN_IN_OUT;
				data.btn_in_out_cmd = server.arg(i);
		}

    /** BTN_ACTIONS_1 END */
	}
	server.send(200, "text/json", getMainJson());
}

/** SERVER_HANDLERS_1 END */








void setUpServer(){
    delay(500);

    /** HOTSPOT_CODE_2 START */
    WiFi.softAP(ssid, password);
    WiFi.softAPConfig(local_ip, gateway, subnet);
    delay(100);
    /** LCD_MODULE_6 START */
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("IP=192.168.1.1");
    lcd.setCursor(0,1);
    lcd.print("PAS=");
    lcd.print(password);
    delay(5000);
    /** LCD_MODULE_6 END */
    /** HOTSPOT_CODE_2 END */


    

    /** CLIENT_CODE_2 START */
    /** LCD_MODULE_5 START */
    /** LCD_MODULE_5 END */
        /** LCD_MODULE_6 START */
        /** LCD_MODULE_6 END */
    /** LCD_MODULE_6 START */
    /** LCD_MODULE_6 END */
    /** CLIENT_CODE_2 END */
   

    if (MDNS.begin("esp32")) {
        Serial.println("MDNS responder started");
    }

    server.on("/", handle_Home);
    server.on("/main.js", handle_MainJS);
    server.on("/act", handel_UserAction);
    server.on("/main.json", handle_MainJson);
    server.on("/data.json", handle_DataJson);
    server.on("/main.css", handle_MainCSS);
    server.onNotFound(handle_NotFound);
    server.begin();
    delay(300);
    Serial.println("HTTP server started");

}




void setUpGPIO(){
/** FINGER_SENS_0 START */
/** FINGER_SENS_0 END */

/** USER_PINS_2 START */
  pinMode(SUN_PIN, INPUT);
  pinMode(LEVEL1_PIN, INPUT);
  pinMode(LEVEL2_PIN, INPUT);
  pinMode(LEVEL3_PIN, INPUT);

  pinMode(PUMP_PIN, OUTPUT);
  pinMode(LIGHT_PIN, OUTPUT);
  pinMode(FAN_PIN, OUTPUT);

/** USER_PINS_2 END */
}



/** FINGER_SENS_0 START */
/** FINGER_SENS_0 END */

/** HEART_RATE_0 START */
/** HEART_RATE_0 END */

/** OXY_GEN_0 START */
/** OXY_GEN_0 END */


  /** USER_GLOBALS_2 START */
  /** USER_GLOBALS_2 END */

void setup(){
  Serial.begin(115200);
  Serial.println("powerup.");
  setUpGPIO();

  /** ULTRASONIC_MODULEA_2 START */
  /** ULTRASONIC_MODULEA_2 END */
  
  /** ULTRASONIC_MODULEB_2 START */
  /** ULTRASONIC_MODULEB_2 END */

  /** USER_MODULE_11 START */
  /** USER_MODULE_11 END */

  /** LCD_MODULE_3 START */
  setUpLcd();
  /** LCD_MODULE_3 END */


  /** SERVO_MODULEA_2 START */
    /** USER_SERVO_1 START */
    /** USER_SERVO_1 END */
  /** SERVO_MODULEA_2 END */



  /** ENTRY_CODE_3 START */
  /** ENTRY_CODE_3 END */

  /** EXIT_CODE_3 START */
  /** EXIT_CODE_3 END */



  setUpServer();

  /** USER_GLOBALSINIT_1 START */
  setupRTC();
  /** USER_GLOBALSINIT_1 END */

  /** LED_BLINK_2 START */
  setUpLedBlink();
  /** LED_BLINK_2 END */



  /** USER_INIT_1 START */
  /** USER_INIT_1 END */

}

/** USER_GLOBALS_3 START */
void inputDateFromSerial() {
	// Call this if you notice something coming in on
	// the serial port. The stuff coming in should be in
	// the order YYMMDDwHHMMSS, with an 'x' at the end.
	boolean isStrComplete = false;
	char inputChar;
	byte temp1, temp2;
	char inputStr[20];

	uint8_t currentPos = 0;
	while (!isStrComplete) {
		if (Serial.available()) {
			inputChar = Serial.read();
			inputStr[currentPos] = inputChar;
			currentPos += 1;

      // Check if string complete (end with "x")
			if (inputChar == 'x') {
				isStrComplete = true;
			}
		}
	}
	Serial.println(inputStr);

  // Find the end of char "x"
  int posX = -1;
  for(uint8_t i = 0; i < 20; i++) {
    if(inputStr[i] == 'x') {
      posX = i;
      break;
    }
  }

  // Consider 0 character in ASCII
  uint8_t zeroAscii = '0';

	// Read Year first
	temp1 = (byte)inputStr[posX - 13] - zeroAscii;
	temp2 = (byte)inputStr[posX - 12] - zeroAscii;
	year = temp1 * 10 + temp2;

	// now month
	temp1 = (byte)inputStr[posX - 11] - zeroAscii;
	temp2 = (byte)inputStr[posX - 10] - zeroAscii;
	month = temp1 * 10 + temp2;

	// now date
	temp1 = (byte)inputStr[posX - 9] - zeroAscii;
	temp2 = (byte)inputStr[posX - 8] - zeroAscii;
	date = temp1 * 10 + temp2;

	// now Day of Week
	dow = (byte)inputStr[posX - 7] - zeroAscii;

	// now Hour
	temp1 = (byte)inputStr[posX - 6] - zeroAscii;
	temp2 = (byte)inputStr[posX - 5] - zeroAscii;
	hour = temp1 * 10 + temp2;

	// now Minute
	temp1 = (byte)inputStr[posX - 4] - zeroAscii;
	temp2 = (byte)inputStr[posX - 3] - zeroAscii;
	minute = temp1 * 10 + temp2;

	// now Second
	temp1 = (byte)inputStr[posX - 2] - zeroAscii;
	temp2 = (byte)inputStr[posX - 1] - zeroAscii;
	second = temp1 * 10 + temp2;
}


float calibration_value = 28.34;
int phval = 0; 
unsigned long avgval; 
int buffer_arr[10],temp;


/** USER_GLOBALS_3 END */

uint32_t data_update_timestamp = 0;


void loop(){
  server.handleClient();

  /** LED_BLINK_3 START */
  blink_led(500);
  /** LED_BLINK_3 END */

  /** USER_LOOPVARS_1 START */
  /** USER_LOOPVARS_1 END */
  if(userBtnAction != btnAction.BTN_NONE){
  /** BUTTON_ACTION_2 START */
		if(userBtnAction == btnAction.PUMP_CONTROL ){
			//data.pump_control = data.pump_control_cmd;
 /** USER_CONDITION_1 START */
    data.pump_control = data.pump_control_cmd;
    if(data.pump_control == "ON"){
      data.pump_control_class = "danger";
    }
    else if(data.pump_control == "OFF"){
      data.pump_control_class = "success";
    }
    else if(data.pump_control == "AUTO"){
      data.pump_control_class = "primary";
    }

 /** USER_CONDITION_1 END */
		}
		if(userBtnAction == btnAction.BTN_IN_OUT ){
			//data.btn_in_out = data.btn_in_out_cmd;
 /** USER_CONDITION_2 START */
      data.btn_in_out = data.btn_in_out_cmd;
      if(data.btn_in_out == "OUT"){
        digitalWrite(FAN_PIN,LOW);
        data.btn_in_out_class = "danger";
      }
      else{
        data.btn_in_out_class = "success";
        digitalWrite(FAN_PIN,HIGH);
      }
 /** USER_CONDITION_2 END */
		}

  /** BUTTON_ACTION_2 END */
    userBtnAction = btnAction.BTN_NONE;
    Serial.println("Button clicked");
  }


  if(data_update_timestamp+500 < millis()){
     data_update_timestamp = millis();

    /** FINGER_SENS_0 START */
      /** HEART_RATE_0 START */
      /** HEART_RATE_0 END */
      /** OXY_GEN_0 START */
      /** OXY_GEN_0 END */
      /** HEART_RATE_0 START */
      /** HEART_RATE_0 END */
      /** OXY_GEN_0 START */
      /** OXY_GEN_0 END */
    /** FINGER_SENS_0 END */

  /** USER_LOOP_1 START */
  // Serial.print(myRTC.getYear(), DEC);
  // Serial.print("-");
  // Serial.print(myRTC.getMonth(century), DEC);
  // Serial.print("-");
  // Serial.print(myRTC.getDate(), DEC);
  // Serial.print(" ");
  // Serial.print(myRTC.getHour(h12Flag, pmFlag), DEC); //24-hr
  // Serial.print(":");
  // Serial.print(myRTC.getMinute(), DEC);
  // Serial.print(":");
  // Serial.println(myRTC.getSecond(), DEC);

  data.clock = String( myRTC.getYear() ) +"-"+ String( myRTC.getMonth(century) ) +"-"+ String( myRTC.getDate() ) + "<br>" + String( myRTC.getHour(h12Flag, pmFlag) ) +":"+String( myRTC.getMinute() )+":"+ String(myRTC.getSecond());
  Serial.println(data.clock);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("T:");
  lcd.print(data.temperature);
  lcd.print((char)223);
  lcd.print("C ");
  lcd.print("H:");
  lcd.print(data.humidity);
  lcd.print("%");
  lcd.setCursor(0,1);
  lcd.print(data.clock.substring(data.clock.indexOf(">")+1, data.clock.length()));



  int sun = digitalRead(SUN_PIN) == 1 ? 0 : 1;
  
  if(sun){
    data.light = "DAY";
    data.light_class = "warning";
    digitalWrite(LIGHT_PIN, LOW);
  }
  else{
    data.light = "NIGHT";
    data.light_class = "secondary";
    digitalWrite(LIGHT_PIN, HIGH);
  }


  int level = digitalRead(LEVEL1_PIN) == 0 ? 0x01 : 0x00;
  // level |= digitalRead(LEVEL2_PIN) == 0 ? 0x02 : 0x00;
  // level |= digitalRead(LEVEL3_PIN) == 0 ? 0x04 : 0x00;

  if(level){
    data.level = "FULL";
    data.level_class = "success";
  }
  else{
    data.level = "LOW";
    data.level_class = "warning";
  }
  // if(level&0x01){
  //    data.level = "FULL";
  //    data.level_class = "success";
  // }
  // else if(level&0x02){
  //    data.level = "MEDIUM";
  //    data.level_class = "success";
  // }
  // else if(level&0x04){
  //    data.level = "LOW";
  //    data.level_class = "warning";
  // }
  // else{
  //   data.level = "EMPTY";
  //   data.level_class = "danger";
  // }


  if(data.pump_control == "ON"){
    data.pump = "ON";
    data.pump_class = "danger";
    digitalWrite(PUMP_PIN,HIGH);
  }
  else if(data.pump_control == "OFF"){
    data.pump = "OFF";
    data.pump_class = "success";
    digitalWrite(PUMP_PIN,LOW);
  }
  else if(data.pump_control == "AUTO"){
    
    if(data.humidity < 40){
       data.pump = "AUTO ON";
       data.pump_class = "danger";
       digitalWrite(PUMP_PIN,HIGH);
    }
    else{
       data.pump = "AUTO OFF";
       data.pump_class = "success";
       digitalWrite(PUMP_PIN,LOW);
    }
  }


    for(int i=0;i<10;i++) 
    { 
      buffer_arr[i]=analogRead(PH_PIN);
      delay(2);
    }
    for(int i=0;i<9;i++)
    {
      for(int j=i+1;j<10;j++)
      {
        if(buffer_arr[i]>buffer_arr[j]){
          temp=buffer_arr[i];
          buffer_arr[i]=buffer_arr[j];
          buffer_arr[j]=temp;
        }
      }
    }
    avgval=0;
    for(int i=2;i<8;i++)
    avgval+=buffer_arr[i];
    float volt=(float)avgval*3.3/4095/6;
    float ph_act = -5.70 * volt + calibration_value;
    Serial.print("volt:");
    Serial.println(volt);
    Serial.print("ph_act:");
    Serial.println(ph_act);
    data.ph = ph_act;
  /** USER_LOOP_1 END */

  /** LCD_MODULE_4 START */



    // lcd.clear();
    // lcd.setCursor(0,0);
    // lcd.print("Hello 1");
    // lcd.setCursor(0,1);
    // lcd.print("Hello 2");
  /** LCD_MODULE_4 END */

  
  }



  /** USER_LOOP_2 START */
   
  /** USER_LOOP_2 END */



  /** USER_LOOP_3 START */
   if (Serial.available()) {
    inputDateFromSerial();

    myRTC.setClockMode(false);  // set to 24h

    myRTC.setYear(year);
    myRTC.setMonth(month);
    myRTC.setDate(date);
    myRTC.setDoW(dow);
    myRTC.setHour(hour);
    myRTC.setMinute(minute);
    myRTC.setSecond(second);

    // Give time at next five seconds
    

    // Notify that we are ready for the next input
  }
  /** USER_LOOP_3 END */


  /** DHT_MODULE_3 START */
  if(isDHTReady()){
    readDHT11(false /*debug*/);
    if(DHT11Data.error == 1){
      Serial.println("DHT READ ERROR!");
    }else{
        Serial.print("Temp:");
        Serial.println(DHT11Data.temp);
        /** TEMPRATURE_VAR_0 START */
        data.temperature  = DHT11Data.temp;
        /** TEMPRATURE_VAR_0 END */
        Serial.print("Hum:");
        Serial.println(DHT11Data.humidity);

        /** HUMIDITY_VAR_1 START */
        data.humidity  = DHT11Data.humidity;
        /** HUMIDITY_VAR_1 END */
    }
  }
  /** DHT_MODULE_3 END */

  delay(10);
}




